// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one

INSERT INTO users (name, phone_number) VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Name        string
	PhoneNumber string
}

// query.sql
// Creates a new user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.PhoneNumber)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const generateOTP = `-- name: GenerateOTP :exec
UPDATE users SET otp = $1, otp_expiration_time = $2 WHERE phone_number = $3
`

type GenerateOTPParams struct {
	Otp               pgtype.Text
	OtpExpirationTime pgtype.Timestamp
	PhoneNumber       string
}

// Generates a new OTP for a user
func (q *Queries) GenerateOTP(ctx context.Context, arg GenerateOTPParams) error {
	_, err := q.db.Exec(ctx, generateOTP, arg.Otp, arg.OtpExpirationTime, arg.PhoneNumber)
	return err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, name, phone_number, otp, otp_expiration_time FROM users WHERE phone_number = $1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PhoneNumber,
		&i.Otp,
		&i.OtpExpirationTime,
	)
	return i, err
}

const getUserOTP = `-- name: GetUserOTP :one
SELECT otp, otp_expiration_time FROM users WHERE phone_number = $1
`

type GetUserOTPRow struct {
	Otp               pgtype.Text
	OtpExpirationTime pgtype.Timestamp
}

// Retrieves a user's OTP and expiration time
func (q *Queries) GetUserOTP(ctx context.Context, phoneNumber string) (GetUserOTPRow, error) {
	row := q.db.QueryRow(ctx, getUserOTP, phoneNumber)
	var i GetUserOTPRow
	err := row.Scan(&i.Otp, &i.OtpExpirationTime)
	return i, err
}
